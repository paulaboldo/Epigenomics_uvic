####EXERCISE 5: DISTAL REGULATORY ACTIVITY####

# From section 4, you should have obtained a set of ATAC-seq peaks in stomach and sigmoid_colon that lie outside gene coordinates. 

# We will use these peaks as a starting point to build a catalogue of distal regulatory regions.

##TASK 1: Create a folder regulatory_elements inside epigenomics_uvic. This will be the folder where you store all your subsequent results.

# Enter to the folder where

cd epigenomics_uvic/

# Activate the docker

sudo docker run -v $PWD:$PWD -w $PWD --rm -it dgarrimar/epigenomics_course

# Changing directory

cd ../

# Create a new folder and entering it inside 

mkdir regulatory_elements 

cd regulatory_elements

# Creating the same folders that are in Chip-seq and ATAC-seq

mkdir annotation 

mkdir data 

mkdir analyses

mkdir data/bigBed.files 

mkdir data/bed.files 

mkdir analyses/peaks

##TASK 2: Distal regulatory regions are usually found to be flanked by both H3K27ac and H3K4me1. From your starting catalogue of open regions in each tissue, select those that overlap peaks of H3K27ac AND H3K4me1 in the corresponding tissue. You will get a list of candidate distal regulatory elements for each tissue. How many are they?

# Selecting from metadata file and selecting the columns of interest and ordering in a certain form. 
for x in H3K4me1 H3K27ac; do
    grep -F "$x" ../ChIP-seq/metadata.tsv | \
    grep -F "bigBed_narrowPeak" | \
    grep -F "pseudoreplicated_peaks" | \
    grep -F "GRCh38" | \
    awk 'BEGIN{FS=OFS="\t"}{print $1, $11}' | \
    sort -k2,2 -k1,1r | \
    sort -k2,2 -u > analyses/bigBed.peaks."$x".tsv
done


# Download .bigBed
for x in H3K4me1 H3K27ac; do
    cut -f1 analyses/bigBed.peaks."$x".tsv |
    while read filename; do
        wget -P data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
    done
done

# Obtaining .bed from .bigBed

for x in H3K4me1 H3K27ac; do
    cut -f1 analyses/bigBed.peaks."$x".tsv |\
    while read filename; do
        bigBedToBed data/bigBed.files/"$filename".bigBed data/bed.files/"$filename".bed
    done
done

# Obtain the candidate distal regulatory elements for each tissue using the bedtools intersect function

# For stomach
bedtools intersect -a ../ATAC-seq/analyses/peaks.analysis/stomach.outside.gene.body.txt \
                   -b data/bed.files/ENCFF844XRN.bed \
                   data/bed.files/ENCFF977LBD.bed \
                   -u | sort -u | wc -l
# Output
# 18028

# Save it in a document
bedtools intersect -a ../ATAC-seq/analyses/peaks.analysis/stomach.outside.gene.body.txt \
                   -b data/bed.files/ENCFF844XRN.bed \
                   data/bed.files/ENCFF977LBD.bed \
                   -u | sort -u > analyses/peaks/peaks.overlapping.stomach.tsv


# For sigmoid colon

bedtools intersect -a ../ATAC-seq/analyses/peaks.analysis/sigmoid_colon.outside.gene.body.txt \
                   -b data/bed.files/ENCFF724ZOF.bed \
                      data/bed.files/ENCFF872UHN.bed \
                   -u | sort -u | wc -l
# Output
# 23130

# Save it in a document

bedtools intersect -a ../ATAC-seq/analyses/peaks.analysis/sigmoid_colon.outside.gene.body.txt \
                   -b data/bed.files/ENCFF724ZOF.bed \
                      data/bed.files/ENCFF872UHN.bed \
                   -u | sort -u > analyses/peaks/peaks.overlapping.sigmoid_colon.tsv


##TASK 3: Focus on regulatory elements that are located on chromosome 1, and generate a file regulatory.elements.starts.tsv that contains the name of the regulatory region (i.e. the name of the original ATAC-seq peak) and the start (5') coordinate of the region.
From the overlapping peaks genes obtaining starting coordinates.

# Overlapping peaks genes obtaining starting coordinates
for x in stomach sigmoid_colon; do
    echo "$x" 
    grep -F "chr1" analyses/peaks/peaks.overlapping."$x".tsv | \
    awk 'BEGIN{FS=OFS="\t"} {print $4,$2}' | wc -l
done

# Output
# stomach
# 8602
# sigmoid_colon
# 10734

# Save it in a document

for x in stomach sigmoid_colon; do
    grep -F "chr1" analyses/peaks/peaks.overlapping."$x".tsv | \
    awk 'BEGIN{FS=OFS="\t"} {print $4,$2}' > analyses/peaks/regulatory.elements.starts."$x".tsv
done

##TASK 4: Focus on protein-coding genes located on chromosome 1. From the BED file of gene body coordinates that you generated here, prepare a tab-separated file called gene.starts.tsv which will store the name of the gene in the first column, and the start coordinate of the gene on the second column (REMEMBER: for genes located on the minus strand, the start coordinate will be at the 3')

awk 'BEGIN{FS=OFS="\t"} {if ($1=="chr1") {if ($6=="+") start=$2; else start=$3; print $4, start}}' ../ChIP-seq/annotation/gencode.v24.protein.coding.gene.body.bed > analyses/gene.starts.tsv

##TASK 5: Download or copy this python script inside the epigenomics_uvic/bin folder. python ../bin/get.distance.py -h

# Go inside the bin folder
cd ../

cd bin

# Create the python script

nano get.distance2.py #include inside the script from: https://public-docs.crg.es/rguigo/Data/bborsari/UVIC/epigenomics_course/get.distance.py
###Using this script it didn't work correctly, for that reason I change it the script into this (that's why it named get.distance2.py): 

#!/usr/bin/env python

#************
# LIBRARIES *
#************

import sys
from optparse import OptionParser

#*****************
# OPTION PARSING *
#*****************

parser = OptionParser()
parser.add_option("-i", "--input", dest="input")
parser.add_option("-s", "--start", dest="start")
options, args = parser.parse_args()

open_input = open(options.input)
enhancer_start = int(options.start)

#********
# BEGIN *
#********

x = 1000000  # set maximum distance to 1 Mb
selectedGene = ""  # initialize the gene as empty
selectedGeneStart = 0  # initialize the start coordinate of the gene as empty

for line in open_input.readlines():  # for each line in the input file
    gene, y = line.strip().split('\t')  # split the line into two columns based on a tab
    position = int(y)  # define a variable called position that correspond to the integer of the start of the gene
    # compute the absolute value of the difference between position and enhancer_start
    distance = abs(position - enhancer_start)

    # if this absolute value is lower than x
    if distance < x:
        # this value will now be your current x
        x = distance
        # save gene as selectedGene
        selectedGene = gene
        # save position as selectedGeneStart
        selectedGeneStart = position

print("\t".join([selectedGene, str(selectedGeneStart), str(x)]))


# Go another time to regulatory elements folder

cd ../

cd regulatory_elements

# To understand how it works the script
 
python ../bin/get.distance2.py -h

# Check that all works fine

python ../bin/get.distance2.py --input analyses/gene.starts.tsv --start 980000

# Output
# ENSG00000187642.9       982093  2093

##TASK 6. For each regulatory element contained in the file regulatory.elements.starts.tsv, retrieve the closest gene and the distance to the closest gene using the python script you created above. 

cut -f2 ../ATAC-seq/analyses/bigBed.peaks.ids.txt | 
while read tissue; do 
    cat "analyses/peaks/regulatory.elements.starts.$tissue.tsv" | 
    while read element start; do 
        python ../bin/get.distance2.py --input analyses/gene.starts.tsv --start "$start"
    done > "analyses/peaks/$tissue.regulatory_elements.genes.distances.tsv"
done


##TASK 7: Use R to compute the mean and the median of the distances stored in regulatory_elements.genes.distances.tsv.
R
sigmoid<-read.csv("sigmoid_colon.regulatory_elements.genes.distances.tsv", header=F, sep="")
distance_sigmoid<-as.vector(unlist(sigmoid[3]))

mean(distance_sigmoid, na.rm=TRUE)
73026.44
median(distance_sigmoid, na.rm=TRUE)
35768

stomach<-read.csv("stomach.regulatory_elements.genes.distances.tsv", header=F, sep="")
distance_stomach<-as.vector(unlist(stomach[3]))

mean(distance_stomach)
45227.05
median(distance_stomach)
27735

